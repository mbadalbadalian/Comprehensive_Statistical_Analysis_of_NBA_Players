all_seasons_original_DF <- read.csv("all_seasons.csv")
all_seasons_modified_DF <- all_seasons_original_DF
pick_to_modern_round_number_DICT <- list(
`Round 1` = as.character(1:30),
`Round 2` = as.character(31:60)
)
ConvertToModernDraftRound <- function(draft_number) {
for (modern_draft_round in names(pick_to_modern_round_number_DICT)) {
if (draft_number %in% pick_to_modern_round_number_DICT[[modern_draft_round]]) {
return(modern_draft_round)
}
}
return("Undrafted")
}
all_seasons_modified_DF$modern_draft_round <-
sapply(all_seasons_modified_DF$draft_number,ConvertToModernDraftRound)
write.csv(all_seasons_modified_DF,
"Created_Data/all_seasons_modified.csv",row.names = FALSE)
library(GGally)
column_list <- c("modern_draft_round","age","usg_pct","pts","reb","ast")
ggpairs_plot <- ggpairs(all_seasons_modified_DF,
mapping = aes(color = modern_draft_round),
columns = column_list,
columnLabels = c("Draft Round","Age","Usage %","Points","Rebounds","Assists"),
lower = list(continuous = wrap("points",size = 0.5),
mapping = aes(color = modern_draft_round)),
upper = list(continuous = wrap("cor",size = 2.5)))
for (i in 1:length(column_list)) {
ggpairs_plot[i, i] <- ggpairs_plot[i,i] +
aes(color = modern_draft_round, alpha = 0.75)
}
new_ggpairs_plot <- ggpairs_plot + theme_bw() +
theme(axis.text = element_text(size = 7),strip.text = element_text(size = 7))
new_ggpairs_plot
library(rpart)
library(rpart.plot)
seasonal_data_column_list <- c("modern_draft_round","age","usg_pct","pts","reb","ast","gp")
seasonal_data_classification_tree_model <- rpart(modern_draft_round ~ ., method = "class",
data = all_seasons_modified_DF[column_list])
rpart.plot(seasonal_data_classification_tree_model,
main = "Predicting Draft Round Number Using Seasonal Data")
seasonal_data_classification_tree_model_predictions <-
predict(seasonal_data_classification_tree_model,
all_seasons_modified_DF[seasonal_data_column_list],type = "class")
seasonal_data_confusion_matrix <-
table(Prediction = seasonal_data_classification_tree_model_predictions,
Truth = all_seasons_modified_DF$modern_draft_round)
row_labels <- rownames(seasonal_data_confusion_matrix)
updated_row_labels <- paste(row_labels,"(Predictions)",sep = " ")
column_labels <- colnames(seasonal_data_confusion_matrix)
updated_column_labels <- paste(column_labels,"(Truth Values)",sep = " ")
rownames(seasonal_data_confusion_matrix) <- updated_row_labels
colnames(seasonal_data_confusion_matrix) <- updated_column_labels
knitr::kable(seasonal_data_confusion_matrix,
caption = "Confusion Matrix of Seasonal Data Classification Tree Model")
CalculateAccuracies <- function(confusion_matrix,cat_labels) {
accuracies_list <- numeric(length = nrow(confusion_matrix)+1)
for (i in 1:nrow(confusion_matrix)) {
true_value <- confusion_matrix[i,i]
total_value <- sum(confusion_matrix[i,])
accuracies_list[i] <- true_value/total_value
}
num_correct_predictions <- sum(diag(confusion_matrix))
num_total_predictions <- sum(confusion_matrix)
accuracies_list[nrow(confusion_matrix)+1] <-
num_correct_predictions/num_total_predictions
cat_accuracy_labels <- c(cat_labels,"Overall")
accuracies_DF <- data.frame(accuracies_list)
row.names(accuracies_DF) <- cat_accuracy_labels
colnames(accuracies_DF) <- "Accuracy"
return(accuracies_DF)
}
cat_labels <- c("Round 1","Round 2","Undrafted")
seasonal_data_accuracies_DF <-
CalculateAccuracies(seasonal_data_confusion_matrix,cat_labels)
knitr::kable(seasonal_data_accuracies_DF,caption =
"Seasonal Data Classification Tree Model Accuracies")
library(plyr)
library(dplyr)
temp_all_seasons_modified_DF <- all_seasons_modified_DF
temp_all_seasons_modified_DF$season_total_pts <-
temp_all_seasons_modified_DF$pts*temp_all_seasons_modified_DF$gp
temp_all_seasons_modified_DF$season_total_reb <-
temp_all_seasons_modified_DF$reb*temp_all_seasons_modified_DF$gp
temp_all_seasons_modified_DF$season_total_ast <-
temp_all_seasons_modified_DF$ast*temp_all_seasons_modified_DF$gp
temp_all_seasons_modified_GROUPED_DF <- group_by(temp_all_seasons_modified_DF,player_name)
all_career_stats_DF <- ddply(temp_all_seasons_modified_DF,"player_name",summarize,
avg_age_in_career = mean(age,na.rm=TRUE),
avg_player_height = mean(player_height,na.rm=TRUE),
avg_player_weight	= mean(player_weight,na.rm=TRUE),
college	= unique(college),
country = unique(country),
draft_year = unique(draft_year),
draft_round = unique(draft_round),
draft_number = unique(draft_number),
total_gp = sum(gp,na.rm=TRUE),
avg_pts	= sum(season_total_pts,na.rm=TRUE)/sum(gp,na.rm=TRUE),
avg_reb	= sum(season_total_reb,na.rm=TRUE)/sum(gp,na.rm=TRUE),
avg_ast	= sum(season_total_ast,na.rm=TRUE)/sum(gp,na.rm=TRUE),
avg_net_rating = mean(net_rating,na.rm=TRUE),
avg_oreb_pct = mean(oreb_pct,na.rm=TRUE),
avg_dreb_pct = mean(dreb_pct,na.rm=TRUE),
avg_usg_pct = mean(usg_pct,na.rm=TRUE),
avg_ts_pct = mean(ts_pct,na.rm=TRUE),
avg_ast_pct = mean(ast_pct,na.rm=TRUE),
modern_draft_round = unique(modern_draft_round))
write.csv(all_career_stats_DF,
"Created_Data/all_career_stats.csv",row.names = FALSE)
career_data_column_list <- c("modern_draft_round","avg_age_in_career",
"avg_usg_pct","avg_pts","avg_reb","avg_ast","total_gp")
career_data_classification_tree_model <- rpart(modern_draft_round ~ .,
method = "class", data = all_career_stats_DF[career_data_column_list])
rpart.plot(career_data_classification_tree_model,
main = "Predicting Draft Round Number Using Career Data")
career_data_classification_tree_model_predictions <-
predict(career_data_classification_tree_model,
all_career_stats_DF[career_data_column_list],type = "class")
career_data_confusion_matrix <-
table(Prediction = career_data_classification_tree_model_predictions,
Truth = all_career_stats_DF$modern_draft_round)
row_labels <- rownames(career_data_confusion_matrix)
updated_row_labels <- paste(row_labels,"(Predictions)",sep = " ")
column_labels <- colnames(career_data_confusion_matrix)
updated_column_labels <- paste(column_labels,"(Truth Values)",sep = " ")
rownames(career_data_confusion_matrix) <- updated_row_labels
colnames(career_data_confusion_matrix) <- updated_column_labels
knitr::kable(career_data_confusion_matrix,caption =
"Confusion Matrix of Career Data Classification Tree Model")
cat_labels <- c("Round 1","Round 2","Undrafted")
career_data_accuracies_DF <-
CalculateAccuracies(career_data_confusion_matrix,cat_labels)
knitr::kable(career_data_accuracies_DF,caption =
"Career Data Classification Tree Model Accuracies")
career_data_example_1_DF <- all_career_stats_DF[34,]
career_data_example_1_prediction <- predict(career_data_classification_tree_model,
career_data_example_1_DF[career_data_column_list],type = "class")
cat("Example 1:","\n")
cat("Input data:","\n")
head(career_data_example_1_DF[,!names(career_data_example_1_DF) %in% "modern_draft_round"])
cat("Prediction:","\n")
print(summary(career_data_example_1_prediction))
cat("Actual:","\n")
cat(career_data_example_1_DF$modern_draft_round,"\n")
cat("\n")
career_data_example_2_DF <- all_career_stats_DF[15,]
career_data_example_2_prediction <- predict(career_data_classification_tree_model,
career_data_example_2_DF[career_data_column_list],type = "class")
cat("Example 2:","\n")
cat("Input data:","\n")
head(career_data_example_2_DF[,!names(career_data_example_2_DF) %in% "modern_draft_round"])
cat("Prediction:","\n")
print(summary(career_data_example_2_prediction))
cat("Actual:","\n")
cat(career_data_example_2_DF$modern_draft_round,"\n")
library(leaps)
six_most_important_variables_list <-
c("modern_draft_round","age","usg_pct","pts","reb","ast")
output_variable <- c("usg_pct")
input_variables_list <- setdiff(six_most_important_variables_list,output_variable)
model_input_data_DF <- all_seasons_modified_DF[,input_variables_list]
model_input_data_DF <- mutate(model_input_data_DF,
round_1 = ifelse(modern_draft_round == "Round 1",1,0),
round_2 = ifelse(modern_draft_round == "Round 2",1,0),
undrafted = ifelse(modern_draft_round == "Undrafted",1,0))
model_input_data_DF <-
model_input_data_DF[,!names(model_input_data_DF) %in% "modern_draft_round"]
model_input_data_DF$age_squared <- model_input_data_DF$age^2
model_input_data_DF$pts_squared <- model_input_data_DF$pts^2
model_input_data_DF$reb_squared <- model_input_data_DF$reb^2
model_input_data_DF$ast_squared <- model_input_data_DF$ast^2
model_data_DF <- model_input_data_DF
model_data_DF$usg_pct <- all_seasons_modified_DF$usg_pct
subset_regression_model <- regsubsets(usg_pct ~ .,data = model_data_DF,nbest = 1,
really.big = TRUE)
subset_regression_model_summary <- summary(subset_regression_model)
best_regression_model_index <- which.max(subset_regression_model_summary$adjr2)
best_regression_model_coefficients <-
coef(subset_regression_model,best_regression_model_index)
best_regression_model_coefficients <-
best_regression_model_coefficients[best_regression_model_coefficients != 0]
best_regression_model_variables <- names(best_regression_model_coefficients)[-1]
best_regression_model_adjusted_r_squared_value <-
subset_regression_model_summary$adjr2[best_regression_model_index]
cat("\n")
cat("Best model variables:","\n")
cat(best_regression_model_variables,"\n")
best_regression_model_variables_and_usg_pct <-
c("usg_pct",best_regression_model_variables)
best_regression_model_variables_and_usg_pct_DF <-
model_data_DF[,best_regression_model_variables_and_usg_pct]
best_subset_lm_model <- lm(usg_pct ~ .,
data = best_regression_model_variables_and_usg_pct_DF)
best_subset_lm_model_SUMMARY <- summary(best_subset_lm_model)
cat("Best Subset Model Summary")
print(best_subset_lm_model_SUMMARY)
example_1_DF <- model_data_DF[1,]
example_1_prediction <-
predict(best_subset_lm_model,example_1_DF[,!names(example_1_DF) %in% "usg_pct"])
cat("Example 1:","\n")
cat("Input data:","\n")
head(example_1_DF[,!names(example_1_DF) %in% "usg_pct"])
cat("Predicted usg_pct:",example_1_prediction,"\n")
cat("Actual usg_pct:",example_1_DF$usg_pct,"\n")
cat("\n")
example_2_DF <- model_data_DF[500,]
example_2_prediction <-
predict(best_subset_lm_model,example_2_DF[,!names(example_1_DF) %in% "usg_pct"])
cat("Example 2:","\n")
cat("Input data:","\n")
head(example_2_DF[,!names(example_1_DF) %in% "usg_pct"])
cat("Predicted usg_pct:",example_2_prediction,"\n")
cat("Actual usg_pct:",example_2_DF$usg_pct,"\n")
model_input_data_PCA <- prcomp(model_input_data_DF,center = TRUE,scale = TRUE)
model_input_data_PCA_weights <- model_input_data_PCA$rotation
model_input_data_PCA_center <- model_input_data_PCA$center
model_input_data_PCA_scale <- model_input_data_PCA$scale
model_input_data_PCA_SUMMARY <- summary(model_input_data_PCA)
print(model_input_data_PCA_SUMMARY)
variance_threshold <- 0.95
cumulative_variance_list <- model_input_data_PCA_SUMMARY$importance["Cumulative Proportion",]
PCA_num_components <- which(cumulative_variance_list >= variance_threshold)[1]
PCA_variables_used <- colnames(model_input_data_PCA$x[,1:PCA_num_components])
cat("PCA variables used (threshold = ",variance_threshold,"):",sep="")
cat("\n")
cat(PCA_variables_used,"\n")
model_PCA_input_data_DF <-
as.data.frame(model_input_data_PCA$x[,1:PCA_num_components])
model_PCA_data_DF <- model_PCA_input_data_DF
model_PCA_data_DF$usg_pct <- all_seasons_modified_DF$usg_pct
model_PCA_data_lm_model <- lm(usg_pct ~ ., data = model_PCA_data_DF)
model_PCA_data_model_summary <- summary(model_PCA_data_lm_model)
print(model_PCA_data_model_summary)
example_1_DF <- model_data_DF[1,]
example_1_scaled_DF <- scale(example_1_DF[,!names(example_1_DF) %in% "usg_pct"],
center = model_input_data_PCA_center,scale = model_input_data_PCA_scale)
example_1_PCA_DF <-
as.data.frame(t(model_input_data_PCA_weights%*%t(example_1_scaled_DF)))
colnames(example_1_PCA_DF) <- PCA_variables_used
example_1_prediction <-
predict(model_PCA_data_lm_model,example_1_PCA_DF[,1:PCA_num_components])
cat("Example 1:","\n")
cat("Input data:","\n")
head(example_1_DF[,!names(example_1_DF) %in% "usg_pct"])
cat("Predicted usg_pct:",example_1_prediction,"\n")
cat("Actual usg_pct:",example_1_DF$usg_pct,"\n")
cat("\n")
example_2_DF <- model_data_DF[500,]
example_2_scaled_DF <- scale(example_2_DF[,!names(example_2_DF) %in% "usg_pct"],
center = model_input_data_PCA_center,scale = model_input_data_PCA_scale)
example_2_PCA_DF <-
as.data.frame(t(model_input_data_PCA_weights%*%t(example_2_scaled_DF)))
colnames(example_2_PCA_DF) <- PCA_variables_used
example_2_prediction <-
predict(model_PCA_data_lm_model,example_2_PCA_DF[,1:PCA_num_components])
cat("Example 2:","\n")
cat("Input data:","\n")
head(example_2_DF[,!names(example_2_DF) %in% "usg_pct"])
cat("Predicted usg_pct:",example_2_prediction,"\n")
cat("Actual usg_pct:",example_2_DF$usg_pct,"\n")
model_PCA_input_data_DF <-
as.data.frame(model_input_data_PCA$x[,1:PCA_num_components])
model_PCA_data_DF <- model_PCA_input_data_DF
model_PCA_data_DF$usg_pct <- all_seasons_modified_DF$usg_pct
model_PCA_data_lm_model <- lm(usg_pct ~ ., data = model_PCA_data_DF)
model_PCA_data_model_summary <- summary(model_PCA_data_lm_model)
cat("PCA Model Summary")
print(model_PCA_data_model_summary)
